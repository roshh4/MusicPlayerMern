{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roshi\\\\Desktop\\\\music player\\\\FinalMusicPlayerMern\\\\FinalMusicPlayerMern\\\\client\\\\src\\\\RecentlyPlayed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './RecentlyPlayed.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RecentlyPlayed({\n  setSelectedSong\n}) {\n  _s();\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\n  useEffect(() => {\n    const fetchRecentlyPlayed = async () => {\n      try {\n        const response = await axios.get('http://localhost:3002/api/recentlyplayed');\n        if (response.status === 200) {\n          const reversedRecentlyPlayed = response.data.recentlyPlayed.slice(0, 4);\n          setRecentlyPlayed(reversedRecentlyPlayed);\n        } else {\n          console.error('Failed to fetch recently played songs:', response.status);\n        }\n      } catch (error) {\n        console.error('An error occurred while fetching recently played songs:', error);\n      }\n    };\n    fetchRecentlyPlayed();\n  }, []);\n  const handleSongClick = song => {\n    console.log(song);\n    setSelectedSong(song);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: recentlyPlayed.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recently-played-tiles\",\n      children: recentlyPlayed.map(recentlyPlayedItem => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recently-played-tile\",\n        onClick: () => handleSongClick(recentlyPlayedItem.songId),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `images/${recentlyPlayedItem.songId.imageURL}`,\n          alt: recentlyPlayedItem.songId.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"name\",\n            children: recentlyPlayedItem.songId.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artist\",\n            children: recentlyPlayedItem.songId.artist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }, this)]\n      }, recentlyPlayedItem._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No recently played songs yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(RecentlyPlayed, \"4375D1Zm2CHuH659OfA0vr5Q19E=\");\n_c = RecentlyPlayed;\nexport default RecentlyPlayed;\nvar _c;\n$RefreshReg$(_c, \"RecentlyPlayed\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","RecentlyPlayed","setSelectedSong","_s","recentlyPlayed","setRecentlyPlayed","fetchRecentlyPlayed","response","get","status","reversedRecentlyPlayed","data","slice","console","error","handleSongClick","song","log","children","length","className","map","recentlyPlayedItem","onClick","songId","src","imageURL","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","artist","_id","_c","$RefreshReg$"],"sources":["C:/Users/roshi/Desktop/music player/FinalMusicPlayerMern/FinalMusicPlayerMern/client/src/RecentlyPlayed.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './RecentlyPlayed.css';\r\n\r\nfunction RecentlyPlayed({ setSelectedSong }) {\r\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchRecentlyPlayed = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3002/api/recentlyplayed');\r\n        if (response.status === 200) {\r\n          const reversedRecentlyPlayed = response.data.recentlyPlayed.slice(0, 4);\r\n          setRecentlyPlayed(reversedRecentlyPlayed);\r\n        } else {\r\n          console.error('Failed to fetch recently played songs:', response.status);\r\n        }\r\n      } catch (error) {\r\n        console.error('An error occurred while fetching recently played songs:', error);\r\n      }\r\n    };\r\n  \r\n    fetchRecentlyPlayed();\r\n  }, []);  \r\n\r\n  const handleSongClick = (song) => {\r\n    console.log(song);\r\n    setSelectedSong(song);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {recentlyPlayed.length > 0 ? (\r\n        <div className=\"recently-played-tiles\">\r\n          {recentlyPlayed.map((recentlyPlayedItem) => (\r\n            <div key={recentlyPlayedItem._id} className=\"recently-played-tile\" onClick={() => handleSongClick(recentlyPlayedItem.songId)}>\r\n              <img src={`images/${recentlyPlayedItem.songId.imageURL}`} alt={recentlyPlayedItem.songId.name} />\r\n              <div className='text'>\r\n                <p className='name'>{recentlyPlayedItem.songId.name}</p>\r\n                <p className='artist'>{recentlyPlayedItem.songId.artist}</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p>No recently played songs yet.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RecentlyPlayed;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}